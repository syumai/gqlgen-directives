// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Fruit interface {
	IsFruit()
}

type Apple struct {
	ID    string `json:"id"`
	Color Color  `json:"color"`
}

func (Apple) IsFruit() {}

type AppleInput struct {
	Color Color `json:"color"`
}

type Banana struct {
	ID    string `json:"id"`
	Color Color  `json:"color"`
}

func (Banana) IsFruit() {}

type BananaInput struct {
	Color Color `json:"color"`
}

type FruitInput struct {
	Apple  *AppleInput  `json:"apple"`
	Banana *BananaInput `json:"banana"`
	Grape  *GrapeInput  `json:"grape"`
}

type Grape struct {
	ID    string `json:"id"`
	Color Color  `json:"color"`
}

func (Grape) IsFruit() {}

type GrapeInput struct {
	Color Color `json:"color"`
}

type Color string

const (
	ColorRed    Color = "RED"
	ColorYellow Color = "YELLOW"
	ColorPurple Color = "PURPLE"
)

var AllColor = []Color{
	ColorRed,
	ColorYellow,
	ColorPurple,
}

func (e Color) IsValid() bool {
	switch e {
	case ColorRed, ColorYellow, ColorPurple:
		return true
	}
	return false
}

func (e Color) String() string {
	return string(e)
}

func (e *Color) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Color(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Color", str)
	}
	return nil
}

func (e Color) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
